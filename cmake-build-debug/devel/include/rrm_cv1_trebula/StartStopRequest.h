// Generated by gencpp from file rrm_cv1_trebula/StartStopRequest.msg
// DO NOT EDIT!


#ifndef RRM_CV1_TREBULA_MESSAGE_STARTSTOPREQUEST_H
#define RRM_CV1_TREBULA_MESSAGE_STARTSTOPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rrm_cv1_trebula
{
template <class ContainerAllocator>
struct StartStopRequest_
{
  typedef StartStopRequest_<ContainerAllocator> Type;

  StartStopRequest_()
    : run(false)  {
    }
  StartStopRequest_(const ContainerAllocator& _alloc)
    : run(false)  {
  (void)_alloc;
    }



   typedef uint8_t _run_type;
  _run_type run;





  typedef boost::shared_ptr< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartStopRequest_

typedef ::rrm_cv1_trebula::StartStopRequest_<std::allocator<void> > StartStopRequest;

typedef boost::shared_ptr< ::rrm_cv1_trebula::StartStopRequest > StartStopRequestPtr;
typedef boost::shared_ptr< ::rrm_cv1_trebula::StartStopRequest const> StartStopRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator1> & lhs, const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator2> & rhs)
{
  return lhs.run == rhs.run;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator1> & lhs, const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rrm_cv1_trebula

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec9dd3a924ef46b6d608cc3c79a69713";
  }

  static const char* value(const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec9dd3a924ef46b6ULL;
  static const uint64_t static_value2 = 0xd608cc3c79a69713ULL;
};

template<class ContainerAllocator>
struct DataType< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rrm_cv1_trebula/StartStopRequest";
  }

  static const char* value(const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool run\n"
;
  }

  static const char* value(const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.run);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartStopRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rrm_cv1_trebula::StartStopRequest_<ContainerAllocator>& v)
  {
    s << indent << "run: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RRM_CV1_TREBULA_MESSAGE_STARTSTOPREQUEST_H
